version: '3.9'
services:

    apigateway:
        container_name: apigateway_krakend
        build:
            context: .
            dockerfile: Krakend.dockerfile
        restart: always
        networks: 
            - net_apigateway
        volumes: 
            - ./conf/krakend.json:/etc/krakend/krakend.json
            - ./conf/certs/pem/localhost.cert.pem:/certs/pem/localhost.cert.pem
            - ./conf/certs/key/localhost.key.pem:/certs/key/localhost.key.pem
        ports: 
            - 81:80

    static:
        container_name: static_srv_nginx
        build:
            context: .
            dockerfile: BuildStatic.dockerfile
        restart: always
        networks: 
            - net_apigateway
        volumes: 
            - "../nistagramstaticdata/data:/usr/share/nginx/html/data:ro"
            - "../nistagramstaticdata/totp:/usr/share/nginx/html/totp:ro"
            - ./conf/certs/pem/static.cert.pem:/etc/nginx/ssl/static.cert.pem
            - ./conf/certs/key/static.key.pem:/etc/nginx/ssl/static.key.pem
            - ./conf/static.default.conf:/etc/nginx/conf.d/default.conf

    profile:
        container_name: profile_ms
        restart: always
        environment: 
            DB_USERNAME: ${DB_PROFILE_USERNAME}
            DB_PASSWORD: ${DB_PROFILE_PASSWORD}
            DOCKER_ENV_SET_DEV: ""
            MICROSERVICE_JWT_TOKEN_SECRET: ${MICROSERVICE_JWT_TOKEN_SECRET}
            PUBLIC_JWT_TOKEN_SECRET: ${PUBLIC_JWT_TOKEN_SECRET}
        build:
            context: .
            args:
                ARG_TARGET_MS_GO: profile
            dockerfile: Build.dockerfile
        volumes:
            - ./common_pass.txt:/nistagram/common_pass.txt:ro
            - ./conf/certs/key/profile.key.pem:/nistagram/key.pem
            - ./conf/certs/pem/profile.cert.pem:/nistagram/cert.pem
            - ../logs/profile:/logs/profile
            - ../nistagramstaticdata:/nistagramstaticdata
        networks: 
            - net_apigateway
            - net_db_relational
        depends_on: 
            - db_relational

    auth:
        container_name: auth_ms
        restart: always
        environment: 
            DB_USERNAME: ${DB_AUTH_USERNAME}
            DB_PASSWORD: ${DB_AUTH_PASSWORD}
            DOCKER_ENV_SET_DEV: ""
            MAIL_USERNAME: ${MAIL_USERNAME}
            MAIL_PASSWORD: ${MAIL_PASSWORD}
            DB_SEC_ENC: ${DB_SEC_ENC}
            MICROSERVICE_JWT_TOKEN_SECRET: ${MICROSERVICE_JWT_TOKEN_SECRET}
            PUBLIC_JWT_TOKEN_SECRET: ${PUBLIC_JWT_TOKEN_SECRET}
        build:
            context: .
            args:
                ARG_TARGET_MS_GO: auth
            dockerfile: Build.dockerfile
        volumes:
            - ./conf/certs/key/auth.key.pem:/nistagram/key.pem
            - ./conf/certs/pem/auth.cert.pem:/nistagram/cert.pem
            - ../logs/auth:/logs/auth
            - ../nistagramstaticdata/totp:/nistagramstaticdata/totp
        networks: 
            - net_apigateway
            - net_db_relational
        depends_on: 
            - db_relational

    connection:
        container_name: connection_ms
        restart: always
        environment: 
            DB_USERNAME: ${DB_CONNECTION_USERNAME}
            DB_PASSWORD: ${DB_CONNECTION_PASSWORD}
            DOCKER_ENV_SET_DEV: ""
            MICROSERVICE_JWT_TOKEN_SECRET: ${MICROSERVICE_JWT_TOKEN_SECRET}
            PUBLIC_JWT_TOKEN_SECRET: ${PUBLIC_JWT_TOKEN_SECRET}
        build:
            context: .
            args:
                ARG_TARGET_MS_GO: connection
            dockerfile: Build.dockerfile
        volumes:
            - ./conf/certs/key/connection.key.pem:/nistagram/key.pem
            - ./conf/certs/pem/connection.cert.pem:/nistagram/cert.pem
            - ../logs/connection:/logs/connection
        networks: 
            - net_apigateway
            - net_db_graph
        depends_on: 
            - graphdb_connection

    post:
        container_name: post_ms
        restart: always
        environment:
            DB_USERNAME: ${DB_POST_USERNAME}
            DB_PASSWORD: ${DB_POST_PASSWORD}
            DOCKER_ENV_SET_DEV: ""
            MICROSERVICE_JWT_TOKEN_SECRET: ${MICROSERVICE_JWT_TOKEN_SECRET}
            PUBLIC_JWT_TOKEN_SECRET: ${PUBLIC_JWT_TOKEN_SECRET}
        build:
            context: .
            dockerfile: Build.dockerfile
            args:
                ARG_TARGET_MS_GO: post
        volumes:
            - "../nistagramstaticdata:/nistagramstaticdata"
            - ./conf/certs/key/post.key.pem:/nistagram/key.pem
            - ./conf/certs/pem/post.cert.pem:/nistagram/cert.pem
            - ../logs/post:/logs/post

        networks:
            - net_apigateway
            - net_mongo
        depends_on:
            - mongo1

    postreaction:
        container_name: postreaction_ms
        restart: always
        environment:
            DB_USERNAME: ${DB_POST_REACTION_USERNAME}
            DB_PASSWORD: ${DB_POST_REACTION_PASSWORD}
            DOCKER_ENV_SET_DEV: ""
            MICROSERVICE_JWT_TOKEN_SECRET: ${MICROSERVICE_JWT_TOKEN_SECRET}
            PUBLIC_JWT_TOKEN_SECRET: ${PUBLIC_JWT_TOKEN_SECRET}
        build:
            context: .
            dockerfile: Build.dockerfile
            args:
                ARG_TARGET_MS_GO: postreaction
        volumes:
            - ./conf/certs/key/postreaction.key.pem:/nistagram/key.pem
            - ./conf/certs/pem/postreaction.cert.pem:/nistagram/cert.pem
            - ../logs/postreaction:/logs/postreaction

        networks:
            - net_apigateway
            - net_mongo
        depends_on:
            - mongo1
            
    db_relational:
        container_name: db_mysql
        image: mysql
        restart: always
        environment: 
            MYSQL_ROOT_PASSWORD: ${DB_PROFILE_PASSWORD}
        networks: 
            - net_db_relational
        ports:
            - 3306:3306 #dev
        volumes: 
            - type: volume
              source: data_profile
              target: /var/lib/mysql
            - "./conf/dev/mysql:/docker-entrypoint-initdb.d"

#    cache_rbac_:
#        container_name: cache_redis1
#        image: redis
#        restart: always
#        networks: 
#            - net_
#        volumes: 
#            - ./conf/redis.conf:/usr/local/etc/redis/redis.conf
#        command: redis-server /usr/local/etc/redis/redis.conf

    graphdb_connection:
        container_name: graphdb_neo4j
        image: neo4j
        restart: always
        environment: 
            - NEO4J_dbms_connector_bolt_advertised__address=0.0.0.0:7687
            - NEO4J_dbms_connector_bolt_listen__address=0.0.0.0:7687
            - NEO4J_AUTH=${DB_CONNECTION_USERNAME}/${DB_CONNECTION_PASSWORD}
        networks: 
            - net_db_graph
        ports: 
            - 7474:7474
            - 7687:7687 # mora jer je neki mozak pravio da se komunikacija sa bazom radi kompletno iz fronta web aplikacije
        volumes: 
            - type: volume
              source: data_connection
              target: /data

    mongo1:
        container_name: nosqldb_mongo1
        image: mongo
        restart: always
        environment:
            MONGO_INITDB_ROOT_USERNAME: ${DB_POST_USERNAME}
            MONGO_INITDB_ROOT_PASSWORD: ${DB_POST_PASSWORD}
        networks: 
            - net_mongo
        volumes: 
            - type: volume
              source: data3
              target: /data/db

    mongo-express:
        image: mongo-express
        restart: always
        ports:
            - 8082:8081
        environment:
            ME_CONFIG_MONGODB_SERVER: mongo1
            ME_CONFIG_MONGODB_ADMINUSERNAME: ${DB_POST_USERNAME}
            ME_CONFIG_MONGODB_ADMINPASSWORD: ${DB_POST_PASSWORD}
        networks: 
            - net_mongo

    adminer:
        image: adminer
        restart: always
        networks: 
            - net_db_relational
        ports:
            - 8080:8080

#    redis-commander:
#        container_name: redis-commander
#        image: rediscommander/redis-commander
#        restart: always
#        environment:
#            - REDIS_HOST=cache_rbac_
#            - REDIS_PORT=6379
#            - REDIS_PASSWORD=helloworld
#        ports:
#            - 8081:8081
#        networks: 
#            - net_
#        depends_on: 
#            - cache_rbac_


networks: 
    net_apigateway:
    net_db_relational:
    net_db_graph:
    net_mongo:
#    net_:

volumes: 
    data_profile:
    data_auth:
    data_connection:
    data3: